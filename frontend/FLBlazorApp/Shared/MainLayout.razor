@inherits LayoutComponentBase
@inject IJSRuntime JS

@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject IConfiguration configuration
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using Microsoft.AspNetCore.SignalR.Client;
@using FLBlazorApp.ViewModel;
@using FLBlazorApp.Data;
@using FLBlazorApp.Component;
<RadzenDialog/>
<RadzenNotification/>
<RadzenContextMenu/>
<RadzenTooltip/>
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta name="description" content="">
	<meta name="author" content="">

	<PageTitle>FLBlazorApp</PageTitle>

	<!-- Custom fonts for this template-->
	<link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
	<link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
		  rel="stylesheet">

	<!-- Custom styles for this template-->
	<link href="css/sb-admin-2.min.css" rel="stylesheet">

</head>
<div id="page-top" class="">
	<!-- Page Wrapper -->
	<div id="wrapper">

		<NavMenu></NavMenu>
		<!-- Content Wrapper -->
		<div id="content-wrapper" class="d-flex flex-column">

			<!-- Main Content -->
			<div id="content">

				<!-- Topbar -->
				<nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

					<!-- Sidebar Toggle (Topbar) -->
					<button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
						<i class="fa fa-bars"></i>
					</button>

					<!-- Topbar Navbar -->
					<ul class="navbar-nav ml-auto">


						<!-- Nav Item - Search Dropdown (Visible Only XS) -->
						<li class="nav-item dropdown no-arrow d-sm-none">
							<a class="nav-link dropdown-toggle" href="#" id="searchDropdown" role="button"
							   data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
								<i class="fas fa-search fa-fw"></i>
							</a>
							<!-- Dropdown - Messages -->
							<div class="dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in"
								 aria-labelledby="searchDropdown">
								<form class="form-inline mr-auto w-100 navbar-search">
									<div class="input-group">
										<input type="text" class="form-control bg-light border-0 small"
											   placeholder="Search for..." aria-label="Search"
											   aria-describedby="basic-addon2">
										<div class="input-group-append">
											<button class="btn btn-primary" type="button">
												<i class="fas fa-search fa-sm"></i>
											</button>
										</div>
									</div>
								</form>
							</div>
						</li>

						<!-- Nav Item - Alerts -->
						@*<li class="@("nav-item dropdown no-arrow mx-1" + (alertsBtnClicked? " show":""))">
						<button class="nav-link dropdown-toggle" id="alertsDropdown" style="background-color: transparent;border-width:0;"
						@onclick="AlertsBtnClicked" @onfocusout="AlertsBtnFocusoutn">
						<i class="fas fa-bell fa-fw"></i>
						<!-- Counter - Alerts -->
						<span class="badge badge-danger badge-counter">3+</span>
						</button>
						<!-- Dropdown - Alerts -->
						<div class="@("dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in"+(alertsBtnClicked? " show":""))"
						aria-labelledby="alertsDropdown">
						<h6 class="dropdown-header">
						Alerts Center
						</h6>
						<a class="dropdown-item d-flex align-items-center" href="#">
						<div class="mr-3">
						<div class="icon-circle bg-primary">
						<i class="fas fa-file-alt text-white"></i>
						</div>
						</div>
						<div>
						<div class="small text-gray-500">December 12, 2019</div>
						<span class="font-weight-bold">A new monthly report is ready to download!</span>
						</div>
						</a>
						<a class="dropdown-item d-flex align-items-center" href="#">
						<div class="mr-3">
						<div class="icon-circle bg-success">
						<i class="fas fa-donate text-white"></i>
						</div>
						</div>
						<div>
						<div class="small text-gray-500">December 7, 2019</div>
						$290.29 has been deposited into your account!
						</div>
						</a>
						<a class="dropdown-item d-flex align-items-center" href="#">
						<div class="mr-3">
						<div class="icon-circle bg-warning">
						<i class="fas fa-exclamation-triangle text-white"></i>
						</div>
						</div>
						<div>
						<div class="small text-gray-500">December 2, 2019</div>
						Spending Alert: We've noticed unusually high spending for your account.
						</div>
						</a>
						<a class="dropdown-item text-center small text-gray-500" href="#">Show All Alerts</a>
						</div>
						</li>*@



						<div class="topbar-divider d-none d-sm-block"></div>

						<!-- Nav Item - User Information -->
						<li class="nav-item dropdown no-arrow">
							<a class="@("nav-link dropdown-toggle"+ (IsUserInfoShow?" show":""))" id="userDropdown" role="button"
							   data-toggle="dropdown" aria-haspopup="true" aria-expanded="@((IsUserInfoShow?"true":"false"))" @onclick="ClickedUserInfo">
								<span class="mr-2 d-none d-lg-inline text-gray-600 small">Admin</span>
								<img class="img-profile rounded-circle"
									 src="img/undraw_profile.svg">
							</a>
							<!-- Dropdown - User Information -->
							<div class="@("dropdown-menu dropdown-menu-right shadow animated--grow-in"+(IsUserInfoShow?" show":""))"
								 aria-labelledby="userDropdown">
								@*								<a class="dropdown-item" href="#">
								<i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
								Profile
								</a>*@
								<a class="dropdown-item" href="@configuration["AccountUrl"]">
									<i class="fas fa-cogs fa-sm fa-fw mr-2 text-gray-400"></i>
									Settings
								</a>
								@*								<a class="dropdown-item" href="#">
								<i class="fas fa-list fa-sm fa-fw mr-2 text-gray-400"></i>
								Activity Log
								</a>*@
								<div class="dropdown-divider"></div>
								<a class="dropdown-item" href="#" data-toggle="modal" data-target="#logoutModal" @onclick="LogoutAsync" @onclick:preventDefault>
									<i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
									Logout
								</a>
							</div>
						</li>
					</ul>
				</nav>
				<!-- End of Topbar -->
				<!-- Begin Page Content -->
				<div class="container-fluid">

					<!-- Page Heading -->
					@Body

				</div>
				<!-- /.container-fluid -->

			</div>
			<!-- End of Main Content -->
			<!-- Footer -->
			<footer class="sticky-footer bg-white">
				<div class="container my-auto">
					<div class="copyright text-center my-auto">
						<span>Copyright &copy; TEAM 9 </span>
					</div>
				</div>
			</footer>
			<!-- End of Footer -->

		</div>
		<!-- End of Content Wrapper -->
	</div>
</div>
@code
{
	//---
	//private bool getAPIServerError = true;
	private bool shouldRender;
	protected override bool ShouldRender() => shouldRender;
	//private void BroadcastDirectorMessage(string message)
	//{
	//	DirectorPageInfo.SavedString = message;

	//	// Inform blazor the UI needs updating
	//	InvokeAsync(StateHasChanged);
	//}
	//private void BroadcastEnvoyMessage(string message)
	//{
	//	EnvoyPageInfo.SavedString = message;

	//	// Inform blazor the UI needs updating
	//	InvokeAsync(StateHasChanged);
	//}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		base.OnAfterRenderAsync(firstRender);
	}
	protected override async Task OnInitializedAsync()
	{
		this.InvokeAsync(() => this.StateHasChanged());
		shouldRender = true;
	}
	private async void OnMyChangeHandler()
	{
		// InvokeAsync is inherited, it syncs the call back to the render thread
		await InvokeAsync(StateHasChanged);
	}
	public async ValueTask DisposeAsync()
	{
	}
	//---
	private bool alertsBtnClicked = false;
	private bool IsUserInfoShow = false;

	private void AlertsBtnClicked()
	{
		alertsBtnClicked = !alertsBtnClicked;
	}
	private void AlertsBtnFocusoutn()
	{
		alertsBtnClicked = false;
	}
	private void ClickedUserInfo()
	{
		IsUserInfoShow = !IsUserInfoShow;
	}
	private async Task LogoutAsync()
	{
		await JS.InvokeAsync<string>("eval", "document.cookie = 'jellox_access_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT;'");
		await JS.InvokeAsync<string>("eval", "delete localStorage.access_token; delete localStorage.roles; delete localStorage.email; delete localStorage.name; 'return'");
		
		await localStorage.SetItemAsStringAsync("return_url", Navigation.Uri);
		Navigation.NavigateTo(configuration["LoginUrl"], true);
	}
}
