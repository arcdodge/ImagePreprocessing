@page "/pre-processing"

@using System.Net.Http.Headers
@using FLBlazorApp.Data;
@using FLBlazorApp.ViewModel;
@using FLBlazorApp.Component;
@using System.Drawing;
@using System.Drawing.Imaging;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using OpenCvSharp;
@using System.Text;

@inject IJSRuntime JS
@inject IHttpClientFactory ClientFactory

<PageTitle>Pre-processing</PageTitle>

<!-- Content Row -->
<div class="row" style="@("display: " + (IsCropROISetting? " none":""))">
	<div style="width:50%;height:50%;">
		<h1 class="h3 mb-2 text-gray-800">Pre-processing</h1>
		<RadzenStack AlignItems="AlignItems.Stretch" style="width:804px;height:804px;border: 2px solid black;">
			<RadzenImage Path="@($"data:image/png;base64,{IntegrationRegionImg}")" />
		</RadzenStack>
	</div>
	<!-- Donut Chart -->
	<div style="width:25%">
		<!-- Thumbnail -->
		<div class="card shadow" style="margin:0 0 2px 0">
			<div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
				<h6 class="m-0 font-weight-bold text-primary">Thumbnail</h6>
			</div>
			<!-- Card Body -->
			<div class="card-body">
				<div style="display: flex;justify-content: center; align-items: center;margin:-10px -30px 0 -30px">
					<div style="background-color:black;margin:10px;width:350px;height:350px;position: relative;">
						<img src="@($"data:image/png;base64,{base64EncodedThumbnail}")" style="object-fit: contain;width:100%;height:100%;position: absolute; top: 0; left: 0; z-index: 1;" />
						@*<RadzenStack AlignItems="AlignItems.Normal" style="object-fit: contain;width:100%;height:100%;position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
						<RadzenImage Path="@($"data:image/jpeg;base64,{base64EncodedThumbnail}")" />
						</RadzenStack>*@
						<canvas id="myCanvas" style="background-color:transparent;object-fit: contain;width:100%;height:100%;position: absolute; top: 0; left: 0; z-index: 2;" width="350" height="350"
								@onmousemove="@mm" @onmousedown="@md" @onmouseup="@mu"></canvas>
					</div>
				</div>
				<!-- Card Header - Dropdown -->
				<div style="display: flex;justify-content: center; align-items: center;">
					<label class="form-label">Magnifying size</label>
					<RadzenSlider @bind-Value="MainROISize" TValue="int" Step="100" Min="300" Max="7000" Style="margin:10px" />
					<div style="width:16%">
						<BootstrapInput @bind-Value="MainROISize"></BootstrapInput>
					</div>
				</div>
			</div>
		</div>
		<!-- File path setting -->
		<div class="card shadow">
			<!-- Card Header - Dropdown -->
			<div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
				<h6 class="m-0 font-weight-bold text-primary">File path setting</h6>
			</div>
			<!-- Card Body -->
			<div class="card-body">
				<label for="exampleFormControlInput1" class="form-label">Load slide Image</label>
				<input value="Local" type="radio" class="btn-check" name="options" id="option1" autocomplete="off" @onchange="loadSlideVisChangedCommand" checked>
				<label class="btn btn-secondary" for="option1">Local</label>
				<div class="mb-3">
					<div style="display: flex;align-items: center;justify-content: center">
						@if (localLoadVis) 
						{ 
							<FileBrowser DirectoryPath=@FLAPIConfig.SlidesMountPath @bind-SelectedPath=ImageLocalPath></FileBrowser> 
						}
						
						<div style="display: flex;align-items: center;justify-content: center;">
							<button type="button" class="btn btn-success" style="" @onclick="LOAD">Load</button>
						</div>
					</div>
				</div>
				<div class="mb-3">
					<label for="exampleFormControlInput1" class="form-label">Save Path</label>
					<div style="display: flex;">
						<input @bind="SavePath" class="form-control" id="exampleFormControlInput1" style="margin:0 10px 0 0">
					</div>
				</div>
				<div class="mb-3">
					<label for="exampleFormControlInput1" class="form-label">Crop ROI</label>
					<div style="display: flex;justify-content: space-between; align-items: center;">
						<button type="button" style="width:100%" class="btn btn-success" @onclick="SetCropROI">Set</button>

					</div>
				</div>
				<div class="mb-3">
					<label for="exampleFormControlInput1" class="form-label">Image Slicing Size</label>
					<input @bind="SlicingSize" type="number" min="300" class="form-control" id="exampleFormControlInput1" style="margin:0 10px 0 0">
				</div>
				<div class="mb-3">
					<label for="exampleFormControlInput1" class="form-label">Prefix Setting</label>
					<div style="display: flex;">
						<input @bind="PrefixStr" class="form-control" id="exampleFormControlInput1" style="margin:0 10px 0 0">
						<input @bind="PrefixNo" type="number" class="form-control" id="exampleFormControlInput1" style="margin:0 10px 0 0">
					</div>
				</div>
			</div>
		</div>
	</div>
	<!-- Pre-processing function -->
	<div style="width:25%;">
		<div class="card shadow mb-4">
			<div class="card-header py-3">
				<h6 class="m-0 font-weight-bold text-primary">Pre-processing function</h6>
			</div>
			<div class="card-body" style="overflow-y:auto;max-height:805px">
				<div class="mb-3">
					<label class="form-label">Acceleration</label>
					<div class="d-flex justify-content-around">
						<div class="form-check">
							<input class="form-check-input" type="radio" name="accelerationOptions" id="cpuRadio" value="CPU" checked="@(accelerationMethod == "CPU")" @onchange="@(() => { accelerationMethod = "CPU"; PreprocessingValueChanged(); })" />
							<label class="form-check-label" for="cpuRadio">CPU</label>
						</div>
						<div class="form-check">
							<input class="form-check-input" type="radio" name="accelerationOptions" id="cvcudaRadio" value="CVCUDA" checked="@(accelerationMethod == "CVCUDA")" @onchange="@(() => { accelerationMethod = "CVCUDA"; PreprocessingValueChanged(); })" />
							<label class="form-check-label" for="cvcudaRadio">CV-CUDA</label>
						</div>
						<div class="form-check">
							<input class="form-check-input" type="radio" name="accelerationOptions" id="cudaRadio" value="CUDA" checked="@(accelerationMethod == "CUDA")" @onchange="@(() => { accelerationMethod = "CUDA"; PreprocessingValueChanged(); })" />
							<label class="form-check-label" for="cudaRadio">CUDA</label>
						</div>
					</div>
				</div>
				<button type="button" class="btn btn-success" style="width:100%" @onclick="SAVE">Save</button>
				<hr />
				Drag the boxes below to determine the preprocessing order based on their sorting.
				Additionally, you can enable or disable the feature of each box.
				<Plk.Blazor.DragDrop.Dropzone Items="MyToDoList" TItem="PreprocessingTodo" OnItemDrop="@((i)=>Lastdropped = i)">
					<PreprocessingStep ValueChangedAction="PreprocessingValueChanged" Item="@context"></PreprocessingStep>
				</Plk.Blazor.DragDrop.Dropzone>
				@*				<hr>
				Some message.*@
			</div>
		</div>
	</div>
</div>
@if (IsCropROISetting)
{
	<div>
		<div style="display: flex;justify-content: center; align-items: center;width:@(ImageLoader.ThumbnailImgWidth)px;height:@(ImageLoader.ThumbnailImgHeight)px;">
			<div style="background-color:black;margin:10px;width:@(ImageLoader.ThumbnailImgWidth)px;height:@(ImageLoader.ThumbnailImgHeight)px;position: relative;">
				<RadzenStack AlignItems="AlignItems.Stretch" Class="rz-mx-auto rz-my-12">
					<RadzenImage Path="@($"data:image/jpeg;base64,{base64EncodedThumbnail}")" style="object-fit: contain;width:100%;height:100%;position: absolute; top: 0; left: 0; z-index: 1;" />
				</RadzenStack>
				<canvas id="cropCanvas" style="background-color:transparent;object-fit: contain;width:100%;height:100%;position: absolute; top: 0; left: 0; z-index: 2;" width="@ImageLoader.ThumbnailImgWidth" height="@ImageLoader.ThumbnailImgHeight"
					@onmousemove="@cmm" @onmousedown="@cmd" @onmouseup="@cmu"></canvas>
			</div>
		</div>
	</div>
}
@code {
	private string accelerationMethod = "CPU";
	private IObservable<string> Frames { get; }
	private IDisposable disSubscribeLive;

	protected override async Task OnInitializedAsync()
	{
		base.OnInitializedAsync();
	}

	private Dictionary<string, string> DCM_Mask_FileName = new Dictionary<string, string>();
	private bool isLoaded = false;
	public PreprocessingTodo lastdropped;
	public PreprocessingTodo Lastdropped
	{
		get => lastdropped;
		set
		{
			lastdropped = value;
			if (isLoaded)
			{
				oaw();
			}
		}
	}
	private async Task oaw()
	{
		await ImageLoader.GetRegionAsync((int)ImageOffsetLT.X, (int)ImageOffsetLT.Y, MainROISize, MainROISize, GetPreprocessingTaskStr(), accelerationMethod);
		IntegrationRegionImg = ImageLoader.AfterShowImg;
		InvokeAsync(StateHasChanged);
	}
	public void PreprocessingValueChanged()
	{
		if (isLoaded)
		{
			oaw();
		}
	}

	public Dictionary<string, string> GetPreprocessingTaskStr()
	{
		Dictionary<string, string> values = new Dictionary<string, string> ();
		
		int taskCount = 0;
		string preprocessTask = "[";
		for (int i = 0; i < MyToDoList.Count(); i++)
		{
			if (!MyToDoList[i].IsEnable) continue;
				try
				{
					if (taskCount > 0) preprocessTask += ",";
					switch (MyToDoList[i].FunctionType)
					{
						case FunctionType.TransformationDegrees:
							preprocessTask += "TransformationDegrees";
							values.Add("degree", MyToDoList[i].Sliderdata.First().Value.ToString());
							taskCount++;
							break;

						case FunctionType.TransformationFlip:
							preprocessTask += "TransformationFlip";
							values.Add("flip_type", MyToDoList[i].Comboboxdata.First().SelectedItem);

							break;

						case FunctionType.GammaCorrection:
							preprocessTask += "GammaCorrection";
							values.Add("lut_value", MyToDoList[i].Sliderdata.First().Value.ToString());
							taskCount++;
							break;

						case FunctionType.Guassian:
							if (MyToDoList[i].Sliderdata[0].Value != 1 || MyToDoList[i].Sliderdata[1].Value != 1)
							{
								preprocessTask += "Guassian";
								values.Add("gaussian_blur_size", MyToDoList[i].Sliderdata[0].Value.ToString());
								values.Add("gaussian_blur_sigma", MyToDoList[i].Sliderdata[1].Value.ToString());
								taskCount++;
							}
							else
							{
								// 參數都是預設就跳過
								taskCount--;
								preprocessTask = preprocessTask.TrimEnd(',');
							}
							break;

						case FunctionType.Blur:
							preprocessTask += "Blur";
							// 假設 Sliderdata[0] 存 blur 大小
							values.Add("blur_size", MyToDoList[i].Sliderdata.First().Value.ToString());
							break;

						case FunctionType.BilateralFilter:
							preprocessTask += "BilateralFilter";
							// 假設 Sliderdata[0]=diameter, [1]=sigmaColor, [2]=sigmaSpace
							values.Add("diameter",   MyToDoList[i].Sliderdata[0].Value.ToString());
							values.Add("sigmaColor", MyToDoList[i].Sliderdata[1].Value.ToString());
							values.Add("sigmaSpace", MyToDoList[i].Sliderdata[2].Value.ToString());
							break;

						case FunctionType.Canny:
							preprocessTask += "Canny";
							// 假設 Sliderdata[0]=threshold1, [1]=threshold2
							values.Add("threshold1", MyToDoList[i].Sliderdata[0].Value.ToString());
							values.Add("threshold2", MyToDoList[i].Sliderdata[1].Value.ToString());
							break;

						case FunctionType.WarpAffine:
							preprocessTask += "WarpAffine";
							// 假設你新增了一個 Textboxdata 來讓使用者輸入 "[a,b,c,d,e,f]"
							values.Add("affine_matrix", MyToDoList[i].Textboxdata.First().Text);
							break;

						default:
							// 未定義的 FunctionType，就把 count 減回去
							taskCount--;
							preprocessTask = preprocessTask.TrimEnd(',');
							break;
					}
				}
				catch (Exception ex)
				{
					System.Console.WriteLine($"!!!!![DEBUG]ex:{ex.Message}\r\nex.trace:{ex.StackTrace}!!!!!");
				}
		}
		preprocessTask += "]";
		values.Add("preprocess_task", preprocessTask);
		values.Add("acceleration", accelerationMethod);

		return values;
	}

	public void CorrectGamma(InputArray src, OutputArray dst, double gamma)
	{
		byte[] lut = new byte[256];
		for (int i = 0; i < lut.Length; i++)
		{
			lut[i] = (byte)(Math.Pow(i / 255.0, 1.0 / gamma) * 255.0);
		}

		Cv2.LUT(src, lut, dst);
	}
	public List<PreprocessingTodo> MyToDoList = new List<PreprocessingTodo>()
	{
		new PreprocessingTodo()
		{
			FunctionType = FunctionType.TransformationDegrees,
			TodoType = PreprocessingValueType.Slider,
			Sliderdata = new List<PreprocessingSlider>()
			{
				new PreprocessingSlider()
				{
					ValueTitle="Transformation Degrees",
					Max = Convert.ToDecimal(270) ,
					Min = Convert.ToDecimal(0) ,
					Step ="90" ,
					Value = 0
				}
			}
		},
		new PreprocessingTodo()
		{
			FunctionType = FunctionType.TransformationFlip,
			TodoType = PreprocessingValueType.Combobox,
			Comboboxdata =new List<PreprocessingChose>()
			{
				new PreprocessingChose()
				{
					ValueTitle = "Transformation Flip" ,
					ChoseItemList = new List<string>{"No Flip","X","Y","XY"},
					SelectedItem = "No Flip"
				}
			}
		},
		new PreprocessingTodo()
		{
			FunctionType = FunctionType.GammaCorrection,
			TodoType = PreprocessingValueType.Slider,
			Sliderdata = new List<PreprocessingSlider>()
			{
				new PreprocessingSlider()
				{
					ValueTitle="Gamma correction",
					Max = Convert.ToDecimal(5) ,
					Min = Convert.ToDecimal(0.1) ,
					Step ="0.1" ,
					Value = 1
				}
			}
		},
		new PreprocessingTodo()
		{
			FunctionType = FunctionType.Guassian,
			TodoType = PreprocessingValueType.Slider,
			Sliderdata = new List<PreprocessingSlider>()
			{
				new PreprocessingSlider()
				{
					ValueTitle="Guassian blur size",
					Max = Convert.ToDecimal(11) ,
					Min = Convert.ToDecimal(1) ,
					Step ="2" ,
					Value = 1
				},
				new PreprocessingSlider()
				{
					ValueTitle="Guassian blur sigma",
					Max = Convert.ToDecimal(10) ,
					Min = Convert.ToDecimal(1) ,
					Step ="1" ,
					Value = 1
				}
			}
		},
		// ———————— 新增功能 ————————

		// 1. 均值濾波 (Mean Blur)
		new PreprocessingTodo()
		{
			FunctionType = FunctionType.Blur,
			TodoType     = PreprocessingValueType.Slider,
			Sliderdata   = new List<PreprocessingSlider>()
			{
				new PreprocessingSlider()
				{
					ValueTitle = "Blur Kernel Size",
					Max        = 25m,
					Min        = 1m,
					Step       = "1",
					Value      = 3
				}
			}
		},

		// 2. 雙邊濾波 (BilateralFilter)
		new PreprocessingTodo()
		{
			FunctionType = FunctionType.BilateralFilter,
			TodoType     = PreprocessingValueType.Slider,
			Sliderdata   = new List<PreprocessingSlider>()
			{
				new PreprocessingSlider()
				{
					ValueTitle = "Diameter",
					Max        = 20m,
					Min        = 1m,
					Step       = "1",
					Value      = 9
				},
				new PreprocessingSlider()
				{
					ValueTitle = "Sigma Color",
					Max        = 200m,
					Min        = 1m,
					Step       = "1",
					Value      = 75
				},
				new PreprocessingSlider()
				{
					ValueTitle = "Sigma Space",
					Max        = 200m,
					Min        = 1m,
					Step       = "1",
					Value      = 75
				}
			}
		},

		// 3. 邊緣偵測 (Canny)
		new PreprocessingTodo()
		{
			FunctionType = FunctionType.Canny,
			TodoType     = PreprocessingValueType.Slider,
			Sliderdata   = new List<PreprocessingSlider>()
			{
				new PreprocessingSlider()
				{
					ValueTitle = "Threshold1",
					Max        = 500m,
					Min        = 0m,
					Step       = "1",
					Value      = 100
				},
				new PreprocessingSlider()
				{
					ValueTitle = "Threshold2",
					Max        = 500m,
					Min        = 0m,
					Step       = "1",
					Value      = 200
				}
			}
		},

		// 4. 仿射變換 (WarpAffine)
		new PreprocessingTodo()
		{
			FunctionType = FunctionType.WarpAffine,
			TodoType     = PreprocessingValueType.Textbox,
			Textboxdata  = new List<PreprocessingTextbox>()
			{
				new PreprocessingTextbox()
				{
					ValueTitle = "Affine Matrix [a,b,c,d,e,f]",
					Text       = "[1,0,0,0,1,0]"
				}
			}
		}
	};

	private string base64EncodedThumbnail = "";

	private ImageLoader ImageLoader;

	private string integrationRegionImg = "";

	private double xRatio;
	private double yRatio;
	private int mainROISize = 500;
	//private ISlideSource IO;
	private (DoubleRect rect, string color) thumbnailViewROI = (new DoubleRect(0, 0, 0, 0), "red");
	private (DoubleRect rect, string color) thumbnailCropROI = (new DoubleRect(0, 0, 0, 0), "green");
	private bool isMouseDownInThumbnailImg;

	public long thumbnailActualWidth { get; set; }
	public long thumbnailActualHeight { get; set; }
	/// <summary>
	/// 預覽做處理的ROI大小 [原圖座標系]
	/// </summary>
	public int MainROISize
	{
		get => mainROISize;
		set
		{
			mainROISize = value;

			xRatio = (float)ImageLoader.OriImageWidth / thumbnailActualWidth;
			yRatio = (float)ImageLoader.OriImageHeight / thumbnailActualHeight;
			ResetViewROIPoints(xRatio, yRatio, ImageOffsetLT, MainROISize);
		}
	}

	/// <summary>
	/// 高解析小區處理後圖
	/// </summary>
	public string IntegrationRegionImg
	{
		get => integrationRegionImg;
		set
		{
			integrationRegionImg = value;
			//System.Console.WriteLine($"!!!!![DEBUG]integrationRegionImg = {integrationRegionImg}!!!!!");
			//System.Console.WriteLine($"!!!!![DEBUG]IntegrationRegionImg = {IntegrationRegionImg}!!!!!");
			InvokeAsync(StateHasChanged);
		}
	}

	private void ShowingPreprocessingImg(Mat img)
	{
		InvokeAsync(StateHasChanged);
	}
	//做框框比例，重新畫出框框
	private async Task ResetViewROIPoints(double xRatio, double yRatio, (double X, double Y) imageOffsetLT, int mainROISize)
	{
		(double X, double Y) roiLT = (imageOffsetLT.X / xRatio, imageOffsetLT.Y / yRatio);
		var w = mainROISize / xRatio;
		var h = mainROISize / yRatio;
		thumbnailViewROI.rect.X = roiLT.X + ThumbnailOffsetLT.X;
		thumbnailViewROI.rect.Y = roiLT.Y + ThumbnailOffsetLT.Y;
		thumbnailViewROI.rect.Width = w;
		thumbnailViewROI.rect.Height = h;

		RefreshThumbnailROI();

		await ImageLoader.GetRegionAsync((int)ImageOffsetLT.X, (int)ImageOffsetLT.Y, MainROISize, MainROISize, GetPreprocessingTaskStr(), accelerationMethod);
		IntegrationRegionImg = ImageLoader.AfterShowImg;
		InvokeAsync(StateHasChanged);
	}

	private async Task RefreshThumbnailROI()
	{
		await JS.InvokeVoidAsync("clearCanvas");
		await JS.InvokeVoidAsync("myCanvasTest", thumbnailViewROI.rect.X, thumbnailViewROI.rect.Y, thumbnailViewROI.rect.Width, thumbnailViewROI.rect.Height, thumbnailViewROI.color);
		await JS.InvokeVoidAsync("myCanvasTest", thumbnailCropROI.rect.X, thumbnailCropROI.rect.Y, thumbnailCropROI.rect.Width, thumbnailCropROI.rect.Height, thumbnailCropROI.color);
	}
	private async Task testCanvas()
	{
		await JS.InvokeVoidAsync("clearCanvas");
		await JS.InvokeVoidAsync("myCanvasTest", 150, 150, 50, 50, "green");
	}
	public string ImageLocalPath { get; set; } = "";
	public string annotationPath { get; set; }
	public string Image_DCM_ID { get; set; }
	public string serverstatus { get; set; }
	public string SavePath { get; set; } = "output/";
	public int SlicingSize { get; set; } = 500;
	public string PrefixStr { get; set; } = "Training";
	public int PrefixNo { get; set; } = 1;

	/// <summary>
	/// 預覽圖片起點偏移[預覽圖座標系](LT)
	/// </summary>
	public (double X, double Y) ThumbnailOffsetLT { get; set; }

	/// <summary>
	/// 圖片顯示偏移[原圖座標系](LT)
	/// </summary>
	public (double X, double Y) ImageOffsetLT { get; set; }

	private async Task LOAD()
	{
		ImageLoader = new ImageLoader();
		if (localLoadVis)
		{
			var imageformat = System.IO.Path.GetExtension(ImageLocalPath);
			if (imageformat == ".svs" ||
			imageformat == ".ndpi" ||
			imageformat == ".mrxs" ||
			imageformat == ".dcm" ||
			//imageformat == ".isyntax" ||
			imageformat == ".bif" ||
			imageformat == ".tif" ||
			imageformat == ".tiff" ||
			imageformat == ".jpg" ||
			imageformat == ".png")
			{
				#region 額外有mask之型別
				if (imageformat == ".dcm")
				{
					string dcm_ID = ImageLocalPath.Split('/')[^2];
					string sr_ID = DCM_Mask_FileName[dcm_ID];
					
					List<int> indices = new List<int>();
					int index = -1;
					while ((index = ImageLocalPath.IndexOf('/', index + 1)) != -1)
					{
						indices.Add(index);
					}
					int allcount = indices.Count;
					annotationPath = ImageLocalPath.Substring(0, indices[allcount - 2] + 1) + $"{sr_ID}.dcm";
				}
				#endregion
			}
			else throw new Exception("The file format is not supported or data corrupt, \nplease check the file or request technical support.");

			await ImageLoader.LoadImageAsync(ImageLocalPath, ImageLoader.thumbnailMaxPixel, annotationPath);
		}
		isLoaded = true;

		base64EncodedThumbnail = ImageLoader.Base64EncodedThumbnail;
		InvokeAsync(StateHasChanged);

		ImageOffsetLT = (ImageLoader.OriImageWidth / 2, ImageLoader.OriImageHeight / 2);

		thumbnailActualWidth = ImageLoader.OriImageWidth > ImageLoader.OriImageHeight ? 350 : ImageLoader.OriImageWidth * 350 / Math.Max(ImageLoader.OriImageWidth, ImageLoader.OriImageHeight);
		thumbnailActualHeight = ImageLoader.OriImageHeight > ImageLoader.OriImageWidth ? 350 : ImageLoader.OriImageHeight * 350 / Math.Max(ImageLoader.OriImageWidth, ImageLoader.OriImageHeight);


		ThumbnailOffsetLT = ((350 - thumbnailActualWidth) / 2, (350 - thumbnailActualHeight) / 2);
		MainROISize = 500;
	}
	public bool IsCropROISetting { get; set; }
	private Func<Task<DoubleRect>> setCropROIFunc;
	private DoubleRect cropROIInfo;//原圖尺寸
	private TaskCompletionSource<DoubleRect> manualSetCropImageTCS;
	private readonly Nito.AsyncEx.AsyncLock processManualLock = new Nito.AsyncEx.AsyncLock();
	private async Task SetCropROI()
	{
		//IsCropROISetting = !IsCropROISetting;
		IsCropROISetting = true;

		setCropROIFunc = TaskSetCropROI;
		cropROIInfo = await setCropROIFunc.Invoke();

		(double X, double Y) roiLT = (cropROIInfo.X / xRatio, cropROIInfo.Y / yRatio);
		var w = cropROIInfo.Width / xRatio;
		var h = cropROIInfo.Height / yRatio;
		thumbnailCropROI.rect.X = roiLT.X + ThumbnailOffsetLT.X;
		thumbnailCropROI.rect.Y = roiLT.Y + ThumbnailOffsetLT.Y;
		thumbnailCropROI.rect.Width = w;
		thumbnailCropROI.rect.Height = h;
		RefreshCropImgROI();
		RefreshThumbnailROI();

		IsCropROISetting = false;
	}

	public async Task<DoubleRect> TaskSetCropROI()
	{
		using (await processManualLock.LockAsync())
		{
			manualSetCropImageTCS = null;
			manualSetCropImageTCS = new TaskCompletionSource<DoubleRect>(TaskCreationOptions.RunContinuationsAsynchronously);

			DoubleRect cropImageArea = await manualSetCropImageTCS.Task;
			//新畫布尺寸轉原圖尺寸
			var xr = (float)ImageLoader.OriImageWidth / ImageLoader.ThumbnailImgWidth;
			var yr = (float)ImageLoader.OriImageHeight / ImageLoader.ThumbnailImgHeight;

			DoubleRect oriSizeRect
			= new DoubleRect(cropImageArea.X * xr, cropImageArea.Y * yr, cropImageArea.Width * xr, cropImageArea.Height * yr);
			return oriSizeRect;
		}
	}

	private (double X, double Y) croppingImgFirstPoint;
	private bool isMouseDownInCropImg;
	private (DoubleRect rect, string color) cropROI = (new DoubleRect(0, 0, 0, 0), "green");
	private void cmd(MouseEventArgs e)
	{
		isMouseDownInCropImg = true;
		if (!IsCropROISetting) return;

		(double X, double Y) down = (e.OffsetX, e.OffsetY);
		if (down.X < 1
	|| down.Y < 1
	|| down.X > ImageLoader.ThumbnailImgWidth
	|| down.Y > ImageLoader.ThumbnailImgHeight) return;

		croppingImgFirstPoint = down;

		var left = Math.Max(1, Math.Min(croppingImgFirstPoint.X, down.X));
		var Right = Math.Min(ImageLoader.ThumbnailImgWidth, Math.Max(croppingImgFirstPoint.X, down.X));
		var top = Math.Max(1, Math.Min(croppingImgFirstPoint.Y, down.Y));
		var Botton = Math.Min(ImageLoader.ThumbnailImgHeight, Math.Max(croppingImgFirstPoint.Y, down.Y));
		cropROI.rect.X = left;
		cropROI.rect.Y = top;
		cropROI.rect.Width = Right - left;
		cropROI.rect.Height = Botton - top;

		RefreshCropImgROI();
	}

	private void cmm(MouseEventArgs e)
	{
		if (!IsCropROISetting) return;

		(double X, double Y) down = (e.OffsetX, e.OffsetY);
		if (down.X < 1
			|| down.Y < 1
			|| down.X > ImageLoader.ThumbnailImgWidth
			|| down.Y > ImageLoader.ThumbnailImgHeight) return;

		if (isMouseDownInCropImg)
		{
			var left = Math.Max(1, Math.Min(croppingImgFirstPoint.X, down.X));
			var Right = Math.Min(ImageLoader.ThumbnailImgWidth, Math.Max(croppingImgFirstPoint.X, down.X));
			var top = Math.Max(1, Math.Min(croppingImgFirstPoint.Y, down.Y));
			var Botton = Math.Min(ImageLoader.ThumbnailImgHeight, Math.Max(croppingImgFirstPoint.Y, down.Y));
			cropROI.rect.X = left;
			cropROI.rect.Y = top;
			cropROI.rect.Width = Right - left;
			cropROI.rect.Height = Botton - top;

			RefreshCropImgROI();
		}
	}
	private void cmu(MouseEventArgs e)
	{
		isMouseDownInCropImg = false;
		if (!IsCropROISetting) return;

		(double X, double Y) down = (e.OffsetX, e.OffsetY);
		if (down.X < 1
			|| down.Y < 1
			|| down.X > ImageLoader.ThumbnailImgWidth
			|| down.Y > ImageLoader.ThumbnailImgHeight) return;

		manualSetCropImageTCS.SetResult(cropROI.rect);
	}
	private async Task RefreshCropImgROI()
	{
		await JS.InvokeVoidAsync("clearCropCanvas");
		await JS.InvokeVoidAsync("cropCanvasTest", cropROI.rect.X, cropROI.rect.Y, cropROI.rect.Width, cropROI.rect.Height, cropROI.color);
		InvokeAsync(StateHasChanged);
	}
	private async Task SAVE()
	{
		var filename = System.IO.Path.GetFileNameWithoutExtension(ImageLocalPath);

		string savefullDir = Path.Combine(SavePath, $"dataset_{filename}","train");
		string imageDir = Path.Combine(savefullDir,"image");
		if (!Path.Exists(imageDir))
			System.IO.Directory.CreateDirectory(imageDir);

		cropTile(filename, savefullDir, SlicingSize, "png", cropROIInfo);
	}
	public async void cropTile(string fileName, string saveDir, int tileSize, string saveType, DoubleRect bound)
	{
		int count = 0;
		for (int j = (int)Math.Floor(bound.Y); j < Math.Floor(bound.Y + bound.Height); j += tileSize)
		{
			for (int i = (int)Math.Floor(bound.X); i < Math.Floor(bound.X + bound.Width); i += tileSize)
			{
				await ImageLoader.GetRegionAsync(i, j, tileSize, tileSize, GetPreprocessingTaskStr(), accelerationMethod);

				ImageLoader.SavePreprocessedImg(saveDir, fileName, PrefixStr, PrefixNo+count, saveType);
				count++;
			}
		}
	}

	private void mm(MouseEventArgs e)
	{
		(double X, double Y) down = (e.OffsetX, e.OffsetY);
		//if (down.X < 0 || down.Y < 0 || down.X > thumbnailActualWidth || down.Y > thumbnailActualHeight) return;
		if (down.X < (350 - thumbnailActualWidth) / 2
			|| down.Y < (350 - thumbnailActualHeight) / 2
			|| down.X > (350 + thumbnailActualWidth) / 2
			|| down.Y > (350 + thumbnailActualHeight) / 2) return;

		if (isMouseDownInThumbnailImg)
		{
			ImageOffsetLT = ((down.X - ThumbnailOffsetLT.X) * xRatio, (down.Y - ThumbnailOffsetLT.Y) * yRatio);
			ResetViewROIPoints(xRatio, yRatio, ImageOffsetLT, MainROISize);
		}
	}
	private void md(MouseEventArgs e)
	{
		isMouseDownInThumbnailImg = true;

		(double X, double Y) down = (e.OffsetX, e.OffsetY);
		//if (down.X < 0 || down.Y < 0 || down.X > thumbnailActualWidth || down.Y > thumbnailActualHeight) return;
		if (down.X < (350 - thumbnailActualWidth) / 2
			|| down.Y < (350 - thumbnailActualHeight) / 2
			|| down.X > (350 + thumbnailActualWidth) / 2
			|| down.Y > (350 + thumbnailActualHeight) / 2) return;

		ImageOffsetLT = ((down.X - ThumbnailOffsetLT.X) * xRatio, (down.Y - ThumbnailOffsetLT.Y) * yRatio);
		ResetViewROIPoints(xRatio, yRatio, ImageOffsetLT, MainROISize);
	}

	private void mu(MouseEventArgs e)
	{
		isMouseDownInThumbnailImg = false;

		(double X, double Y) down = (e.OffsetX, e.OffsetY);
		//if (down.X < 0 || down.Y < 0 || down.X > thumbnailActualWidth || down.Y > thumbnailActualHeight) return;
		if (down.X < (350 - thumbnailActualWidth) / 2
			|| down.Y < (350 - thumbnailActualHeight) / 2
			|| down.X > (350 + thumbnailActualWidth) / 2
			|| down.Y > (350 + thumbnailActualHeight) / 2) return;
	}
	private bool localLoadVis = true;
	private bool serverLoadVis = false;
	private List<string> ServerSlidesList = new List<string>();
	private void loadSlideVisChangedCommand(ChangeEventArgs e)
	{
		switch (e.Value?.ToString())
		{
			case "Local":
				localLoadVis = true;
				serverLoadVis = false;
				break;

			case "Server":
				localLoadVis = false;
				serverLoadVis = true;
				break;
		}
	}
}
